from django.test import TestCase
import os
from django.core.files.uploadedfile import SimpleUploadedFile

from .models import Category, Location


class CategoryModelTest(TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ Category"""

    def setUp(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        self.category = Category.objects.create(
            name="–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è",
            description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
            icon="üèõÔ∏è"
        )

    def test_category_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        self.assertEqual(self.category.name, "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        self.assertEqual(self.category.description,
                         "–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
        self.assertEqual(self.category.icon, "üèõÔ∏è")
        self.assertEqual(str(self.category), "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")

    def test_category_str_representation(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        self.assertEqual(str(self.category), "–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")


class LocationModelTest(TestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–æ–¥–µ–ª–∏ Location"""

    def setUp(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        self.category = Category.objects.create(
            name="–ü–∞—Ä–∫–∏",
            description="–ü–∞—Ä–∫–∏ –∏ —Å–∫–≤–µ—Ä—ã"
        )

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞
        self.test_image = SimpleUploadedFile(
            name='test_image.jpg',
            content=b'fake image content',
            content_type='image/jpeg'
        )

        self.location = Location.objects.create(
            name="–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–∫",
            description="–û–ø–∏—Å–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∞—Ä–∫–∞",
            address="—É–ª. –¢–µ—Å—Ç–æ–≤–∞—è, 1",
            latitude=55.7558,
            longitude=37.6173,
            category=self.category,
            photo=self.test_image,
            is_approved=True
        )

    def tearDown(self):
        """–û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —Ç–µ—Å—Ç–æ–≤"""
        if self.location.photo:
            if os.path.isfile(self.location.photo.path):
                os.remove(self.location.photo.path)

    def test_location_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏"""
        self.assertEqual(self.location.name, "–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–∫")
        self.assertEqual(self.location.latitude, 55.7558)
        self.assertEqual(self.location.longitude, 37.6173)
        self.assertEqual(self.location.category, self.category)
        self.assertTrue(self.location.is_approved)

    def test_location_str_representation(self):
        """–¢–µ—Å—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ª–æ–∫–∞—Ü–∏–∏"""
        self.assertEqual(str(self.location), "–¢–µ—Å—Ç–æ–≤—ã–π –ø–∞—Ä–∫")

    def test_location_coordinates_property(self):
        """–¢–µ—Å—Ç —Å–≤–æ–π—Å—Ç–≤–∞ coordinates"""
        expected_coords = {'lat': 55.7558, 'lng': 37.6173}
        self.assertEqual(self.location.coordinates, expected_coords)

    def test_location_ordering(self):
        """–¢–µ—Å—Ç –ø–æ—Ä—è–¥–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –ª–æ–∫–∞—Ü–∏–π"""
        # –°–æ–∑–¥–∞–µ–º –≤—Ç–æ—Ä—É—é –ª–æ–∫–∞—Ü–∏—é
        location2 = Location.objects.create(
            name="–í—Ç–æ—Ä–∞—è –ª–æ–∫–∞—Ü–∏—è",
            description="–û–ø–∏—Å–∞–Ω–∏–µ",
            latitude=55.7600,
            longitude=37.6200,
            category=self.category
        )

        locations = list(Location.objects.all())
        # –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —É–±—ã–≤–∞–Ω–∏—é –¥–∞—Ç—ã —Å–æ–∑–¥–∞–Ω–∏—è
        self.assertEqual(locations[0], location2)  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å–æ–∑–¥–∞–Ω–Ω–∞—è –ø–µ—Ä–≤–æ–π
        self.assertEqual(locations[1], self.location)
