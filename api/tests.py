
from django.urls import reverse
from rest_framework.test import APITestCase
from rest_framework import status
from locations.models import Category, Location


class CategoryAPITest(APITestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è API –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""

    def setUp(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        self.category1 = Category.objects.create(
            name="–ü–∞—Ä–∫–∏",
            description="–ü–∞—Ä–∫–∏ –∏ —Å–∫–≤–µ—Ä—ã",
            icon="üå≥"
        )
        self.category2 = Category.objects.create(
            name="–ú—É–∑–µ–∏",
            description="–ú—É–∑–µ–∏ –∏ –≤—ã—Å—Ç–∞–≤–∫–∏",
            icon="üèõÔ∏è"
        )

    def test_category_detail_api(self):
        """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ API"""
        url = reverse('category-detail', args=[self.category1.id])
        response = self.client.get(url)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['name'], "–ü–∞—Ä–∫–∏")
        self.assertEqual(response.data['icon'], "üå≥")


class LocationAPITest(APITestCase):
    """–¢–µ—Å—Ç—ã –¥–ª—è API –ª–æ–∫–∞—Ü–∏–π"""

    def setUp(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        self.category = Category.objects.create(name="–ü–∞—Ä–∫–∏")

        # –°–æ–∑–¥–∞–µ–º –æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –∏ –Ω–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏
        self.approved_location = Location.objects.create(
            name="–û–¥–æ–±—Ä–µ–Ω–Ω—ã–π –ø–∞—Ä–∫",
            description="–û–ø–∏—Å–∞–Ω–∏–µ",
            latitude=55.7558,
            longitude=37.6173,
            category=self.category,
            is_approved=True
        )

        self.unapproved_location = Location.objects.create(
            name="–ù–µ–æ–¥–æ–±—Ä–µ–Ω–Ω—ã–π –ø–∞—Ä–∫",
            description="–û–ø–∏—Å–∞–Ω–∏–µ",
            latitude=55.7500,
            longitude=37.6200,
            category=self.category,
            is_approved=False
        )

    def test_geojson_api_endpoint(self):
        """–¢–µ—Å—Ç GeoJSON —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞"""
        url = reverse('locations-geojson')
        response = self.client.get(url)

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(response.data['type'], 'FeatureCollection')
        self.assertEqual(len(response.data['features']), 1)

        feature = response.data['features'][0]
        self.assertEqual(feature['type'], 'Feature')
        self.assertEqual(feature['properties']['name'], "–û–¥–æ–±—Ä–µ–Ω–Ω—ã–π –ø–∞—Ä–∫")
        self.assertEqual(feature['geometry']['type'], 'Point')
        self.assertEqual(feature['geometry']
                         ['coordinates'], [37.6173, 55.7558])


class LocationFilterTest(APITestCase):
    """–¢–µ—Å—Ç—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –ª–æ–∫–∞—Ü–∏–π"""

    def setUp(self):
        """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏"""
        self.parks_category = Category.objects.create(name="–ü–∞—Ä–∫–∏")
        self.museums_category = Category.objects.create(name="–ú—É–∑–µ–∏")

        Location.objects.create(
            name="–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–∞—Ä–∫",
            description="–ë–æ–ª—å—à–æ–π –ø–∞—Ä–∫ –≤ —Ü–µ–Ω—Ç—Ä–µ",
            latitude=55.7558,
            longitude=37.6173,
            category=self.parks_category,
            is_approved=True
        )

        Location.objects.create(
            name="–ò—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π –º—É–∑–µ–π",
            description="–ú—É–∑–µ–π –∏—Å—Ç–æ—Ä–∏–∏",
            latitude=55.7539,
            longitude=37.6208,
            category=self.museums_category,
            is_approved=True
        )
